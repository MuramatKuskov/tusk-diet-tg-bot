const Recipe = require("../schemas/Recipe");

async function searchRecipe(query, handleChat) {
	const chatId = query.message.chat.id;
	// –≤ —ç—Ç–æ—Ç –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Ç–∏–ø—ã –±–ª—é–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞
	let types = [];
	let pipeline = [];

	async function handleCallback(query, nextStep) {
		switch (query.data) {
			case "decline":
				pipeline = [];
				TG_BOT.removeAllListeners();
				await TG_BOT.editMessageText("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ —Å–±—Ä–æ—à–µ–Ω—ã", {
					chat_id: chatId,
					message_id: query.message.message_id,
					reply_markup: {
						inline_keyboard: [
							[{ text: "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç üìù", callback_data: "addRecipe" }],
							[{ text: "–ü–æ–∏—Å–∫ üîé", callback_data: "searchRecipe" }]
						],
					}
				});
				handleChat();
				TG_BOT.answerCallbackQuery(query.id);
				break;
			case "skip":
				nextStep(query);
				TG_BOT.answerCallbackQuery(query.id);
				break;
			case "find":
				if (types.length) {
					pipeline.push({
						$match: {
							"type": types
						}
					})
				}
				if (!pipeline.length) {
					TG_BOT.answerCallbackQuery(query.id);
					return getTitle(query);
				};
				const foundRecipe = await Recipe.aggregate(pipeline);
				const answer = foundRecipe.length ?
					`<b>${foundRecipe[0].title.charAt(0).toUpperCase() + foundRecipe[0].title.slice(1)}</b>

					<b><u>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã</u></b>
					${foundRecipe[0].ingredients.map((el, i) => {
						return foundRecipe[0].quantities[i] ?
							`\n${el.charAt(0).toUpperCase()}${el.slice(1)} ‚Äî ${foundRecipe[0].quantities[i]}${foundRecipe[0].units[i]}`
							:
							`\n${el.charAt(0).toUpperCase()}${el.slice(1)}`
					})}
					
					<b><u>–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ</u></b>
					${foundRecipe[0].cook}
					${foundRecipe[0].link && `<a href="${foundRecipe[0].link}">Link</a>`}`
					:
					"–ü–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ";

				await TG_BOT.editMessageText(answer, {
					chat_id: chatId,
					message_id: query.message.message_id,
					parse_mode: "HTML",
					reply_markup: {
						inline_keyboard: [
							[{ text: "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç üìù", callback_data: "addRecipe" }],
							[{ text: "–ü–æ–∏—Å–∫ üîé", callback_data: "searchRecipe" }]
						],
					}
				});
				handleChat();
				TG_BOT.answerCallbackQuery(query.id);
				break;
			default:
				if (!types.includes(query.data)) types.push(query.data);
				TG_BOT.answerCallbackQuery(query.id);
				break;
		}
	}

	async function getTitle(recievedQuery) {
		TG_BOT.removeAllListeners();
		const nextStep = getIngredients;
		if (!query.message.sticker && !recievedQuery) {
			await TG_BOT.editMessageText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞", {
				chat_id: chatId,
				message_id: query.message.message_id,
				reply_markup: {
					inline_keyboard: [[
						{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "decline" },
						{ text: "–ù–∞–π—Ç–∏", callback_data: "find" },
						{ text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: "skip" }
					]],
				}
			});
		} else {
			await TG_BOT.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞', {
				reply_markup: {
					inline_keyboard: [[
						{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "decline" },
						{ text: "–ù–∞–π—Ç–∏", callback_data: "find" },
						{ text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: "skip" }
					]],
				}
			});
		}

		TG_BOT.on("callback_query", async query => {
			handleCallback(query, nextStep)
		});
		TG_BOT.on("message", async msg => {
			pipeline.push({
				$search: {
					index: 'title',
					autocomplete: {
						path: 'title',
						query: msg.text.toLowerCase()
					}
				}
			});
			nextStep();
		})
	}

	async function getIngredients(query) {
		TG_BOT.removeAllListeners();
		const nextStep = getType;
		if (query) {
			await TG_BOT.editMessageText("–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", {
				chat_id: chatId,
				message_id: query.message.message_id,
				reply_markup: {
					inline_keyboard: [[
						{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "decline" },
						{ text: "–ù–∞–π—Ç–∏", callback_data: "find" },
						{ text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: "skip" }
					]],
				}
			})
		} else {
			await TG_BOT.sendMessage(chatId, "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", {
				reply_markup: {
					inline_keyboard: [[
						{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "decline" },
						{ text: "–ù–∞–π—Ç–∏", callback_data: "find" },
						{ text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: "skip" }
					]],
				}
			});
		}
		TG_BOT.on("callback_query", async query => {
			handleCallback(query, nextStep)
		});
		TG_BOT.on("message", async msg => {
			const ingredients = msg.text.split(',').map(el => el.toLowerCase());
			if (!pipeline.length) {
				pipeline.push({
					$search: {
						index: "ingredients",
						text: {
							path: "ingredients",
							query: ingredients
						}
					}
				})
			} else {
				pipeline.push({
					$match: {
						ingredients: { $all: ingredients }
					}
				})
			}
			nextStep();
		})
	}

	async function getType(query) {
		TG_BOT.removeAllListeners();
		if (query) {
			await TG_BOT.editMessageText("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –±–ª—é–¥–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)", {
				chat_id: chatId,
				message_id: query.message.message_id,
				reply_markup: {
					inline_keyboard: [
						[{ text: "–ó–∞–≤—Ç—Ä–∞–∫", callback_data: "breakfast" }, { text: "–ó–∞–∫—É—Å–∫–∞", callback_data: "snack" }, { text: "–ù–∞–ø–∏—Ç–æ–∫", callback_data: "drink" }],
						[{ text: "–û—Å–Ω–æ–≤–Ω–æ–µ", callback_data: "main" }, { text: "–°–∞–ª–∞—Ç", callback_data: "salad" }, { text: "–°–æ—É—Å", callback_data: "sauce" }],
						[{ text: "–ì–∞—Ä–Ω–∏—Ä", callback_data: "garnish" }, { text: "–í—ã–ø–µ—á–∫–∞", callback_data: "bakery" }, { text: "–î—Ä—É–≥–æ–µ", callback_data: "other" }],
						[{ text: "–°—É–ø", callback_data: "soup" }, { text: "–î–µ—Å–µ—Ä—Ç", callback_data: "dessert" }],
						[{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "decline" }, { text: "–ù–∞–π—Ç–∏", callback_data: "find" }]
					],
				}
			})
		} else {
			await TG_BOT.sendMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –±–ª—é–¥–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)", {
				reply_markup: {
					inline_keyboard: [
						[{ text: "–ó–∞–≤—Ç—Ä–∞–∫", callback_data: "breakfast" }, { text: "–ó–∞–∫—É—Å–∫–∞", callback_data: "snack" }, { text: "–ù–∞–ø–∏—Ç–æ–∫", callback_data: "drink" }],
						[{ text: "–û—Å–Ω–æ–≤–Ω–æ–µ", callback_data: "main" }, { text: "–°–∞–ª–∞—Ç", callback_data: "salad" }, { text: "–°–æ—É—Å", callback_data: "sauce" }],
						[{ text: "–ì–∞—Ä–Ω–∏—Ä", callback_data: "garnish" }, { text: "–í—ã–ø–µ—á–∫–∞", callback_data: "bakery" }, { text: "–î—Ä—É–≥–æ–µ", callback_data: "other" }],
						[{ text: "–°—É–ø", callback_data: "soup" }, { text: "–î–µ—Å–µ—Ä—Ç", callback_data: "dessert" }],
						[{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "decline" }, { text: "–ù–∞–π—Ç–∏", callback_data: "find" }]
					],
				}
			});
		};
		TG_BOT.on("callback_query", async query => {
			handleCallback(query)
		})
		TG_BOT.on("message", async msg => {
			await TG_BOT.sendMessage(chatId, "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ")
		});
	}

	getTitle();
}

module.exports = searchRecipe;