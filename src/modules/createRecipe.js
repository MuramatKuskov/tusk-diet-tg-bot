const Recipe = require("../schemas/Recipe");

async function createRecipe(query, bot, handleChat) {
	const chatId = query.message.chat.id;

	const recipeBlank = () => {
		return ({
			img: "#",
			title: "",
			origin: "",
			type: [],
			ingredients: [],
			quantities: [],
			units: [],
			cook: "",
			difficulty: "",
			time: 10,
			rating: null,
			ratingIterator: 0,
			link: "",
			// author: query.user.username,
			anonymously: false,
			moderating: true,
		})
	}
	const recipe = recipeBlank();
	console.log(query, query?.user);

	async function handleBtns(query, nextStep) {
		switch (query.data) {
			case "skip":
				nextStep();
				break;
			case "decline":
				await bot.editMessageText("–†–µ—Ü–µ–ø—Ç —É–¥–∞–ª–µ–Ω", {
					chat_id: chatId,
					message_id: query.message.message_id,
					reply_markup: {
						inline_keyboard: [
							[{ text: "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç üìù", callback_data: "addRecipe" }],
							[{ text: "–ü–æ–∏—Å–∫ üîé", callback_data: "searchRecipe" }]
						]
					}
				})
				handleChat();
				break;
			case "hideUsername":
				recipe.anonymously = true;
				pushRecipe()
				break;
			case "showUsername":
				pushRecipe()
		}
		bot.answerCallbackQuery(query.id);
	}

	function setRecipe(params) {
		for (let key in params) {
			// –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–ª—é —Ç–∏–ø–∞ string/number, –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø—Ä—è–º–æ
			if (typeof recipe[key] != "object") recipe[key] = params[key];
			// –º–∞—Å—Å–∏–≤—ã –º–æ–≥—É—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—Å—è –ø–æ—à–∞–≥–æ–≤–æ (—Å–º setIngredients), —Å–æ—Ö—Ä–∞–Ω—è–µ–º prev
			if (typeof recipe[key] === "object") recipe[key] = [...recipe[key], params[key]]
		}
	}

	async function setTitle() {
		const nextStep = setType;
		if (!query.message.sticker) {
			bot.editMessageText("–®–∞–≥ 1 –∏–∑ 5(10): –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞", {
				chat_id: chatId,
				message_id: query.message.message_id,
				reply_markup: {
					inline_keyboard: [
						[{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "decline" }]
					],
				}
			});
		} else {
			await bot.sendMessage(chatId, "–®–∞–≥ 1 –∏–∑ 5(9): –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞", {
				reply_markup: {
					inline_keyboard: [
						[{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "decline" }]
					]
				}
			});
		}
		bot.on("message", async msg => {
			setRecipe({ title: msg.text.toLowerCase(), author: msg.from.username });
			nextStep();
		});
		bot.on("callback_query", async query => {
			handleBtns(query, nextStep);
		})
	}

	async function setType() {
		bot.removeAllListeners();
		let multipleChoice = false;
		await bot.sendMessage(chatId, "–®–∞–≥ 2 –∏–∑ 5(10): –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –±–ª—é–¥–∞ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)", {
			reply_markup: {
				inline_keyboard: [
					[{ text: "–ó–∞–≤—Ç—Ä–∞–∫", callback_data: "breakfast" }, { text: "–ó–∞–∫—É—Å–∫–∞", callback_data: "snack" }, { text: "–ù–∞–ø–∏—Ç–æ–∫", callback_data: "drink" }],
					[{ text: "–û—Å–Ω–æ–≤–Ω–æ–µ", callback_data: "main" }, { text: "–°–∞–ª–∞—Ç", callback_data: "salad" }, { text: "–°–æ—É—Å", callback_data: "sauce" }],
					[{ text: "–ì–∞—Ä–Ω–∏—Ä", callback_data: "garnish" }, { text: "–í—ã–ø–µ—á–∫–∞", callback_data: "bakery" }, { text: "–î—Ä—É–≥–æ–µ", callback_data: "other" }],
					[{ text: "–°—É–ø", callback_data: "soup" }, { text: "–î–µ—Å–µ—Ä—Ç", callback_data: "dessert" }, { text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "decline" }],
				]
			}
		});
		await bot.on("callback_query", async query => {
			if (query.data === "decline") return handleBtns(query);
			if (!recipe.ingredients.includes(query.data)) setRecipe({ type: query.data });
			if (!multipleChoice) setIngredients();
			multipleChoice = true;
		})
	}

	async function setIngredients() {
		bot.removeListener("callback_query");
		await bot.sendMessage(chatId, `–®–∞–≥ 3 –∏–∑ 5(10): –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–º—É–∫–∞ 100–≥, —è–π—Ü–∞ 2—à—Ç"`, {
			reply_markup: {
				inline_keyboard: [
					[{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "decline" }]
				]
			}
		});
		bot.on("message", async (msg) => {
			// –µ—Å–ª–∏ —é–∑–µ—Ä –≤–≤–µ–ª –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —á–∏—Å—Ç–∏–º –ø—Ä–æ—Å–ª—É—à–∫—É —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
			bot.removeListener("callback_query");

			// –ø–æ–ª—É—á–∞–µ–º 2-–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤–∏–¥–∞ [["product", "quantity+unit"], ...]
			const rawIngredients = msg.text.split(",").map(el => { return el.trim().split(" ") });
			// —Ä–∞–∑–±–∏–≤–∞–µ–º 2 —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞, –ø–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ [["product", +quantity, "unit"], ...]
			rawIngredients.forEach((el, index) => {
				if (rawIngredients[index].length === 1) {
					return rawIngredients[index] = ([
						rawIngredients[index][0].replace(/-/g, " "),
						1,
						""
					])
				}
				if (rawIngredients[index].length > 2) {
					return rawIngredients[index][1] = +rawIngredients[index][1]
				}
				rawIngredients[index] = ([
					rawIngredients[index][0].replace(/-/g, " "),		// "product"
					+/\d+/.exec(el),											// +quantity
					el[1].replace(/\d+/g, '')								// "unit"
				])
			});
			// –º–∞—Å—Å–∏–≤ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—à–∞–≥–æ–≤–æ
			rawIngredients.forEach(el => {
				if (el[2].length) {
					return setRecipe({ ingredients: el[0].toLowerCase(), quantities: el[1], units: el[2].toLowerCase() })
				}
				setRecipe({ ingredients: el[0].toLowerCase(), quantities: el[1], units: el[2] })
			});
			const duplicates = await Recipe.aggregate([{
				$search: {
					index: 'title',
					autocomplete: {
						path: 'title',
						query: recipe.title
					}
				}
			},
			{
				$match: {
					"type": recipe.type
				}
			},
			{
				$match: {
					ingredients: { $all: recipe.ingredients }
				}
			}])
			if (duplicates.length) {
				await bot.sendMessage(chatId,
					"–†–µ—Ü–µ–ø—Ç —ç—Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞, —Å –ø–æ—Ö–æ–∂–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ, –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ—Ü–µ–ø—Ç!"
				)
			}
			setProcess();
		});
		bot.on("callback_query", async query => {
			handleBtns(query);
		})
	}

	async function setProcess() {
		bot.removeAllListeners();
		await bot.sendMessage(chatId, `–®–∞–≥ 4 –∏–∑ 5(10): –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è`, {
			reply_markup: {
				inline_keyboard: [
					[{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "decline" }]
				]
			}
		});
		bot.on("message", async (msg) => {
			setRecipe({ cook: msg.text });
			setTime();
		});
		bot.on("callback_query", async query => {
			handleBtns(query);
		})
	}

	async function setTime() {
		bot.removeAllListeners();
		await bot.sendMessage(chatId, `–®–∞–≥ 5 –∏–∑ 5(10): –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 25`, {
			reply_markup: {
				inline_keyboard: [
					[{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "decline" }]
				]
			}
		});
		bot.on("message", async (msg) => {
			setRecipe({ time: +/\d+/.exec(msg.text) });
			setImg();
		});
		bot.on("callback_query", async query => {
			handleBtns(query);
		})
	}

	async function setImg() {
		bot.removeAllListeners();
		await bot.sendMessage(chatId, "–ö–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ–∫–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è, —ç—Ç–æ—Ç —à–∞–≥ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
		await bot.sendMessage(chatId, `–®–∞–≥ 6 –∏–∑ 5(10): –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`, {
			reply_markup: {
				inline_keyboard: [
					[{ text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: "skip" }],
					[{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "decline" }]
				]
			}
		});
		// –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
		bot.on("message", async (msg) => {
			if (msg.photo) {
				setRecipe({ img: "" })
				nextStep();
			}
		});
		bot.on("callback_query", async query => {
			handleBtns(query, setOrigin);
		})
	}

	async function setOrigin() {
		bot.removeAllListeners();
		await bot.sendMessage(chatId, `–®–∞–≥ 7 –∏–∑ 5(10): –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –±–ª—é–¥–∞`, {
			reply_markup: {
				inline_keyboard: [
					[{ text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: "skip" }],
					[{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "decline" }]
				]
			}
		});
		bot.on("message", async (msg) => {
			setRecipe({ origin: msg.text.toLowerCase() });
			nextStep();
		})
		bot.on("callback_query", async query => {
			handleBtns(query, setDifficulty);
		})
	}

	async function setDifficulty() {
		bot.removeAllListeners();
		await bot.sendMessage(chatId, `–®–∞–≥ 8 –∏–∑ 5(10): –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è`, {
			reply_markup: {
				inline_keyboard: [
					[{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "decline" }],
					[{ text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: "skip" }]
				]
			}
		});
		bot.on("message", async (msg) => {
			setRecipe({ difficulty: msg.text.toLowerCase() });
			nextStep();
		});
		bot.on("callback_query", async query => {
			handleBtns(query, setLink);
		})
	}

	async function setLink() {
		bot.removeAllListeners();
		await bot.sendMessage(chatId, `–®–∞–≥ 9 –∏–∑ 5(10): –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ—Ü–µ–ø—Ç`, {
			reply_markup: {
				inline_keyboard: [
					[{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "decline" }],
					[{ text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: "skip" }]
				]
			}
		});
		bot.on("message", async (msg) => {
			setRecipe({ link: msg.text });
			nextStep();
		})
		bot.on("callback_query", async query => {
			handleBtns(query, setAuthorship);
		})
	}

	async function setAuthorship() {
		bot.removeAllListeners();
		await bot.sendMessage(chatId, `–®–∞–≥ 10 –∏–∑ 5(10): –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å Username –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ—Ü–µ–ø—Ç–∞?`, {
			reply_markup: {
				inline_keyboard: [
					[{ text: "–û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "decline" }],
					[{ text: "–ü–æ–∫–∞–∑–∞—Ç—å", callback_data: "showUsername" }],
					[{ text: "–°–∫—Ä—ã—Ç—å", callback_data: "hideUsername" }],
				]
			}
		});
		bot.on("callback_query", async query => {
			handleBtns(query);
		})
	}

	async function pushRecipe() {
		bot.removeAllListeners();
		await Recipe.create(recipe);
		await bot.sendMessage(chatId,
			`<b>${recipe.title}</b>
				
				<b><u>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã</u></b>
				${recipe.ingredients}
				
				<b><u>–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ</u></b>
				${recipe.cook}
				${recipe.link ? `<a href=${recipe.link}>Link</a>` : ""}
				`,
			{ parse_mode: "HTML" });
		await bot.sendMessage(chatId, `–†–µ—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω`, {
			reply_markup: {
				inline_keyboard: [
					[{ text: "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç üìù", callback_data: "addRecipe" }],
					[{ text: "–ü–æ–∏—Å–∫ üîé", callback_data: "searchRecipe" }]
				]
			}
		});
		handleChat();
	}

	setTitle();
}

module.exports = createRecipe;