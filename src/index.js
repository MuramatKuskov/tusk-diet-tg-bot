// —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ø–∞–∫–µ—Ç—ã
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
const Recipe = require('./schemas/Recipe.js');
require('dotenv').config();
// —Å–≤–æ–∏ –∏–º–ø–æ—Ä—Ç—ã
const createRecipe = require('./modules/createRecipe');
const pushRecipe = require('./endpoints/pushRecipe.js');
const getRecipes = require('./endpoints/getRecipes.js');
const searchRecipe = require('./modules/searchRecipe.js');

const token = process.env.token.replace(/'/g, '');
const DB_URL = process.env.DB_URL;

// Create a bot that uses 'polling' to fetch new updates
const bot = new TelegramBot(token, { polling: true });

const app = express();
// middleware –ø–∞—Ä—Å–∏—Ç—å –∂—Å–æ–Ω
app.use(express.json());
// mw –¥–ª—è –∫—Ä–æ—Å—Å–¥–æ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –±—ç–∫–∞)
app.use(cors());

async function handleChat() {
	bot.removeAllListeners();
	async function greet(chatId) {
		await bot.sendMessage(chatId, 'Wtf do you looking for?');
		await bot.sendSticker(chatId, 'https://tlgrm.eu/_/stickers/c36/1c0/c361c044-f105-45f1-ba01-33626dfc1d57/9.webp', {
			// –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä–Ω–µ—Ç –µ–µ —Ç–µ–∫—Å—Ç
			reply_markup: {
				inline_keyboard: [
					[{ text: "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç üìù", callback_data: "addRecipe" }],
					[{ text: "–ü–æ–∏—Å–∫ üîé", callback_data: "searchRecipe" }]
				]
			}
		});
	}

	bot.on("message", async (msg) => {
		const chatId = msg.chat.id;
		if (msg.text !== "/start") {
			return await bot.sendMessage(chatId, "–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º: /start", { reply_markup: { inline_keyboard: [[{ text: "Start", callback_data: "start" }]] } });
		}
		greet(chatId);
	})

	bot.on("callback_query", async query => {
		switch (query.data) {
			case "addRecipe":
				bot.removeAllListeners();
				createRecipe(query, bot, handleChat);
				break;
			case "searchRecipe":
				bot.removeAllListeners();
				searchRecipe(query, bot, handleChat);
				break;
			case "start":
				greet(query.message.chat.id);
				break;
		}
		// –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å
		bot.answerCallbackQuery(query.id);
	});
};

const PORT = 8080;

async function startServer() {
	try {
		await mongoose.connect(DB_URL, { autoIndex: false });
		app.listen(PORT, () => { console.log(`Server started on port ${PORT}!`); });
		handleChat();
		// —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
		pushRecipe(app);
		getRecipes(app);
	} catch (e) {
		console.log(e);
	}
}

startServer();
